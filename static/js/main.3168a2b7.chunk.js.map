{"version":3,"sources":["components/searchbar.js","App.js","serviceWorker.js","index.js"],"names":["searchBar","state","appid","url","data","place","localStorage","getItem","remember","recvdata","getData","event","setItem","fetch","then","respsonse","json","setState","handleChange","value","target","type","checked","name","this","console","log","cod","img","weather","icon","className","main","description","src","alt","temp","feels_like","sys","country","Fragment","placeholder","onChange","onClick","presentdata","React","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3168a2b7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass searchBar extends React.Component {\r\n  state = {\r\n    appid: \"78479a389deda51cc993958e10492f19\",\r\n    url: \"https://api.openweathermap.org/data/2.5/weather\",\r\n    data: {},\r\n    place:\r\n      localStorage.getItem(\"place\") !== null\r\n        ? localStorage.getItem(\"place\")\r\n        : \"\",\r\n    remember: false,\r\n    recvdata: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    var place = localStorage.getItem(\"place\");\r\n\r\n    if (place) {\r\n      this.setState({ place: place });\r\n      console.log(place);\r\n      this.getData();\r\n    }\r\n  }\r\n\r\n  getData = (event) => {\r\n    const url = `https://api.openweathermap.org/data/2.5/weather?appid=${this.state.appid}&q=${this.state.place}&units=metric`;\r\n    if (this.state.remember === true) {\r\n      localStorage.setItem(\"place\", this.state.place);\r\n    }\r\n    fetch(url)\r\n      .then((respsonse) => respsonse.json())\r\n      .then((data) => this.setState({ data: data, recvdata: true }));\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    const value =\r\n      event.target.type === \"checkbox\"\r\n        ? event.target.checked\r\n        : event.target.value;\r\n\r\n    this.setState({ [event.target.name]: value });\r\n  };\r\n\r\n  presentdata() {\r\n    if (this.state.recvdata) {\r\n      if (this.state.data.cod !== \"404\") {\r\n        var img =\r\n          \"http://openweathermap.org/img/wn/\" +\r\n          this.state.data.weather[0].icon +\r\n          \"@2x.png\";\r\n        return (\r\n          <div className=\"weather-report\">\r\n            <h1>{this.state.data.name}</h1>\r\n            <p>Main : {this.state.data.weather[0].main}</p>\r\n            <p>Description : {this.state.data.weather[0].description}</p>\r\n            <img src={img} className=\"weather-bg\" alt=\"weather icon\" />\r\n            <h1>Main</h1>\r\n            <p>Temp : {this.state.data.main.temp} °C</p>\r\n            <p>Feels like : {this.state.data.main.feels_like} °C</p>\r\n            <p>Country : {this.state.data.sys.country}</p>\r\n          </div>\r\n        );\r\n      } else {\r\n        return (\r\n          <div className=\"weather-report\">\r\n            <h1>404! City not found</h1>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"inputform\">\r\n          <div>\r\n            <h1 className=\"main\">\r\n              Weather<span> React</span>\r\n            </h1>\r\n            <input\r\n              type=\"text\"\r\n              name=\"place\"\r\n              value={this.state.place}\r\n              placeholder=\"Enter a Place\"\r\n              onChange={this.handleChange}\r\n            />\r\n            <br />\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                value={this.state.remember}\r\n                name=\"remember\"\r\n                onChange={this.handleChange}\r\n              />\r\n              Remember my place\r\n            </label>\r\n            <button onClick={this.getData}>Submit</button>\r\n          </div>\r\n        </div>\r\n        <div className=\"weather-container\">{this.presentdata()}</div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default searchBar;\r\n","import React from \"react\";\nimport Searchbar from \"./components/searchbar\";\nimport \"./index.css\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Searchbar />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}